// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/diskfs/go-diskfs/partition (interfaces: Table)
//
// Generated by this command:
//
//	mockgen github.com/diskfs/go-diskfs/partition Table
//

// Package mock_partition is a generated GoMock package.
package services

import (
	reflect "reflect"

	backend "github.com/diskfs/go-diskfs/backend"
	part "github.com/diskfs/go-diskfs/partition/part"
	gomock "github.com/golang/mock/gomock"
)

// MockTable is a mock of Table interface.
type MockTable struct {
	ctrl     *gomock.Controller
	recorder *MockTableMockRecorder
	isgomock struct{}
}

// MockTableMockRecorder is the mock recorder for MockTable.
type MockTableMockRecorder struct {
	mock *MockTable
}

// NewMockTable creates a new mock instance.
func NewMockTable(ctrl *gomock.Controller) *MockTable {
	mock := &MockTable{ctrl: ctrl}
	mock.recorder = &MockTableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTable) EXPECT() *MockTableMockRecorder {
	return m.recorder
}

// GetPartitions mocks base method.
func (m *MockTable) GetPartitions() []part.Partition {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartitions")
	ret0, _ := ret[0].([]part.Partition)
	return ret0
}

// GetPartitions indicates an expected call of GetPartitions.
func (mr *MockTableMockRecorder) GetPartitions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartitions", reflect.TypeOf((*MockTable)(nil).GetPartitions))
}

// Repair mocks base method.
func (m *MockTable) Repair(diskSize uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Repair", diskSize)
	ret0, _ := ret[0].(error)
	return ret0
}

// Repair indicates an expected call of Repair.
func (mr *MockTableMockRecorder) Repair(diskSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Repair", reflect.TypeOf((*MockTable)(nil).Repair), diskSize)
}

// Type mocks base method.
func (m *MockTable) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockTableMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockTable)(nil).Type))
}

// UUID mocks base method.
func (m *MockTable) UUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// UUID indicates an expected call of UUID.
func (mr *MockTableMockRecorder) UUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UUID", reflect.TypeOf((*MockTable)(nil).UUID))
}

// Verify mocks base method.
func (m *MockTable) Verify(f backend.File, diskSize uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", f, diskSize)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockTableMockRecorder) Verify(f, diskSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockTable)(nil).Verify), f, diskSize)
}

// Write mocks base method.
func (m *MockTable) Write(arg0 backend.WritableFile, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockTableMockRecorder) Write(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockTable)(nil).Write), arg0, arg1)
}
